import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  # Cost from start node to current node
        self.h = h  # Heuristic estimate of the cost from current node to goal

    def __lt__(self, other):
        # Comparison function for priority queue
        return (self.g + self.h) < (other.g + other.h)

def astar(start, goal, heuristic, neighbors):
    open_set = []
    closed_set = set()

    start_node = Node(state=start, g=0, h=heuristic(start, goal))
    heapq.heappush(open_set, start_node)

    while open_set:
        current_node = heapq.heappop(open_set)

        if current_node.state == goal:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(current_node.state)

        for neighbor in neighbors(current_node.state):
            if neighbor in closed_set:
                continue

            g = current_node.g + 1  # Assuming uniform edge cost of 1
            h = heuristic(neighbor, goal)
            new_node = Node(state=neighbor, parent=current_node, g=g, h=h)

            # Check if new node is already in the open set
            existing_node = next((node for node in open_set if node.state == neighbor), None)

            if existing_node is None or new_node < existing_node:
                heapq.heappush(open_set, new_node)

    return None  # No path found

# Example usage:
def euclidean_distance(state1, state2):
    return ((state1[0] - state2[0]) ** 2 + (state1[1] - state2[1]) ** 2) ** 0.5

def get_neighbors(state):
    x, y = state
    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]  # Assuming 4-connected grid

start_state = (0, 0)
goal_state = (4, 4)
path = astar(start_state, goal_state, euclidean_distance, get_neighbors)
print("Path from", start_state, "to", goal_state, ":", path)

