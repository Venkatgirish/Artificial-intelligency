class MapColoringCSP:
    def __init__(self, variables, domains, constraints):
        self.variables = variables
        self.domains = domains
        self.constraints = constraints

    def is_consistent(self, variable, assignment):
        for neighbor in self.constraints.get(variable, []):
            if neighbor in assignment and assignment[neighbor] == assignment[variable]:
                return False
        return True

    def backtracking_search(self, assignment={}):
        if len(assignment) == len(self.variables):
            return assignment

        variable = next(var for var in self.variables if var not in assignment)
        for value in self.domains[variable]:
            assignment[variable] = value
            if self.is_consistent(variable, assignment):
                result = self.backtracking_search(assignment)
                if result is not None:
                    return result
            del assignment[variable]
        return None

# Example usage:
variables = ['WA', 'NT', 'SA', 'Q', 'NSW', 'V', 'T']
domains = {variable: ['red', 'green', 'blue'] for variable in variables}
constraints = {
    'WA': ['NT', 'SA'],
    'NT': ['WA', 'SA', 'Q'],
    'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
    'Q': ['NT', 'SA', 'NSW'],
    'NSW': ['Q', 'SA', 'V'],
    'V': ['SA', 'NSW'],
    'T': []
}

map_coloring_csp = MapColoringCSP(variables, domains, constraints)
solution = map_coloring_csp.backtracking_search()

if solution:
    print("Map Coloring Solution:")
    for variable, color in solution.items():
        print(f"{variable}: {color}")
else:
    print("No solution found.")
