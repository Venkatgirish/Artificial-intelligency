from collections import deque

# Function to perform BFS to find the minimum number of steps to reach the target state
def waterJugBFS(x, y, target):
    # Create a set to store visited states
    visited = set()

    # Create a queue for BFS
    queue = deque([(0, 0)])  # Initial state (0, 0)

    # Variable to store the number of steps
    steps = 0

    # Perform BFS
    while queue:
        # Get the current size of the queue
        size = len(queue)

        # Process all states at the current level
        for _ in range(size):
            # Get the current state (jug1, jug2)
            jug1, jug2 = queue.popleft()

            # Check if the current state is the target state
            if jug1 == target or jug2 == target:
                return steps

            # Add the current state to the visited set
            visited.add((jug1, jug2))

            # Fill jug1 to its maximum capacity
            if (x, jug2) not in visited:
                queue.append((x, jug2))
                visited.add((x, jug2))

            # Fill jug2 to its maximum capacity
            if (jug1, y) not in visited:
                queue.append((jug1, y))
                visited.add((jug1, y))

            # Empty jug1
            if (0, jug2) not in visited:
                queue.append((0, jug2))
                visited.add((0, jug2))

            # Empty jug2
            if (jug1, 0) not in visited:
                queue.append((jug1, 0))
                visited.add((jug1, 0))

            # Pour water from jug2 to jug1 until jug1 is full or jug2 is empty
            if jug1 + jug2 >= x and (x, jug2 - (x - jug1)) not in visited:
                queue.append((x, jug2 - (x - jug1)))
                visited.add((x, jug2 - (x - jug1)))

            elif jug1 + jug2 < x and (jug1 + jug2, 0) not in visited:
                queue.append((jug1 + jug2, 0))
                visited.add((jug1 + jug2, 0))

            # Pour water from jug1 to jug2 until jug2 is full or jug1 is empty
            if jug1 + jug2 >= y and ((jug1 - (y - jug2)), y) not in visited:
                queue.append((jug1 - (y - jug2), y))
                visited.add((jug1 - (y - jug2), y))

            elif jug1 + jug2 < y and (0, jug1 + jug2) not in visited:
                queue.append((0, jug1 + jug2))
                visited.add((0, jug1 + jug2))

        # Increment the steps
        steps += 1

    # If no solution is found
    return -1

# Example usage
if __name__ == "__main__":
    x = 4  # Capacity of jug 1
    y = 3  # Capacity of jug 2
    target = 2  # Target amount of water

    min_steps = waterJugBFS(x, y, target)

    if min_steps != -1:
        print("Minimum number of steps required:", min_steps)
    else:
        print("Solution not possible")
