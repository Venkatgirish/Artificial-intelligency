import random

class VacuumCleaner:
    def __init__(self, size):
        self.size = size
        self.grid = [[0] * size for _ in range(size)]  # Initialize the grid with all cells clean
        self.dirty_cells = set()  # Set to store coordinates of dirty cells
        self.position = (random.randint(0, size-1), random.randint(0, size-1))  # Randomly place the vacuum cleaner
        self.moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Possible movements: right, down, left, up

    def add_dirty_cell(self, x, y):
        self.grid[x][y] = 1  # Mark the cell as dirty
        self.dirty_cells.add((x, y))  # Add the cell to the set of dirty cells

    def clean(self):
        while self.dirty_cells:
            self.clean_current_cell()
            self.move_to_next_cell()
            print("Grid after current move:")
            self.display_grid()
            print()

    def clean_current_cell(self):
        x, y = self.position
        if self.grid[x][y] == 1:  # If the current cell is dirty, clean it
            print(f"Cleaning cell ({x}, {y})")
            self.grid[x][y] = 0
            self.dirty_cells.remove((x, y))

    def move_to_next_cell(self):
        x, y = self.position
        dx, dy = random.choice(self.moves)  # Randomly choose a direction to move
        new_x, new_y = x + dx, y + dy

        if 0 <= new_x < self.size and 0 <= new_y < self.size:  # Check if the new position is within the grid
            print(f"Moving from ({x}, {y}) to ({new_x}, {new_y})")
            self.position = (new_x, new_y)

    def display_grid(self):
        for row in self.grid:
            print(" ".join(map(str, row)))

if __name__ == "__main__":
    size = 5  # Size of the grid
    vacuum = VacuumCleaner(size)

    # Add some dirty cells
    vacuum.add_dirty_cell(1, 1)
    vacuum.add_dirty_cell(2, 3)
    vacuum.add_dirty_cell(4, 0)

    print("Initial grid:")
    vacuum.display_grid()
    print()

    vacuum.clean()
