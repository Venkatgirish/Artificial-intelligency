import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board):
    # Check rows
    for row in board:
        if all(cell == "X" for cell in row):
            return 1
        elif all(cell == "O" for cell in row):
            return -1

    # Check columns
    for col in range(3):
        if all(board[row][col] == "X" for row in range(3)):
            return 1
        elif all(board[row][col] == "O" for row in range(3)):
            return -1

    # Check diagonals
    if all(board[i][i] == "X" for i in range(3)) or all(board[i][2-i] == "X" for i in range(3)):
        return 1
    elif all(board[i][i] == "O" for i in range(3)) or all(board[i][2-i] == "O" for i in range(3)):
        return -1

    # Check if the board is full (tie)
    if all(all(cell != " " for cell in row) for row in board):
        return 0

    return None

def minimax(board, depth, is_maximizer):
    winner = check_winner(board)
    if winner is not None:
        return winner * (1 / depth)  # Normalize the score by depth

    if is_maximizer:
        best_score = -math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == " ":
                    board[row][col] = "X"
                    score = minimax(board, depth+1, False)
                    board[row][col] = " "
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == " ":
                    board[row][col] = "O"
                    score = minimax(board, depth+1, True)
                    board[row][col] = " "
                    best_score = min(score, best_score)
        return best_score

def find_best_move(board):
    best_score = -math.inf
    best_move = None
    for row in range(3):
        for col in range(3):
            if board[row][col] == " ":
                board[row][col] = "X"
                score = minimax(board, 0, False)
                board[row][col] = " "
                if score > best_score:
                    best_score = score
                    best_move = (row, col)
    return best_move

def tic_tac_toe():
    board = [[" "]*3 for _ in range(3)]

    while True:
        print_board(board)
        player_row = int(input("Enter row (0, 1, or 2): "))
        player_col = int(input("Enter column (0, 1, or 2): "))

        if board[player_row][player_col] != " ":
            print("That cell is already taken. Try again.")
            continue

        board[player_row][player_col] = "O"

        winner = check_winner(board)
        if winner is not None:
            print_board(board)
            if winner == 1:
                print("You win!")
            elif winner == 0:
                print("It's a tie!")
            else:
                print("Computer wins!")
            break

        computer_row, computer_col = find_best_move(board)
        board[computer_row][computer_col] = "X"

        winner = check_winner(board)
        if winner is not None:
            print_board(board)
            if winner == 1:
                print("You win!")
            elif winner == 0:
                print("It's a tie!")
            else:
                print("Computer wins!")
            break

if __name__ == "__main__":
    tic_tac_toe()
